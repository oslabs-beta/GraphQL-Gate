import 'ts-jest';
import { buildSchema, DocumentNode, parse } from 'graphql';
import { TypeWeightObject } from '../../src/@types/buildTypeWeights';
import buildTypeWeightsFromSchema from '../../src/analysis/buildTypeWeights';
import getQueryTypeComplexity from '../../src/analysis/typeComplexityAnalysis';
// Test the weight function generated by the typeweights object when a limiting keyword is provided

// Test cases:
// Default value provided to schema
// Arg passed in as variable
// Arg passed in as scalar
// Invalid arg type provided

// Default value passed with query

describe('Weight Function correctly parses Argument Nodes if', () => {
    const schema = buildSchema(`
        type Query {
            reviews(episode: Episode!, first: Int = 5): [Review]
            heroes(episode: Episode!, first: Int): [Review]
            villains(episode: Episode!, limit: Int! = 3): [Review] 
            characters(episode: Episode!, limit: Int!): [Review] 
        }
        type Review {
            episode: Episode
            stars: Int!
            commentary: String
            scalarList(last: Int): [Int]
            objectList(first: Int): [Object]
        }
        type Object {
            hi: String
        }
        enum Episode {
            NEWHOPE
            EMPIRE
            JEDI
        }`);
    // building the typeWeights object here since we're testing the weight function created in
    // the typeWeights object
    const typeWeights: TypeWeightObject = buildTypeWeightsFromSchema(schema);

    describe('a default value is provided in the schema', () => {
        test('and a value is not provided with the query', () => {
            const query = `query { reviews(episode: NEWHOPE) { stars, episode } }`;
            const queryAST: DocumentNode = parse(query);
            expect(getQueryTypeComplexity(queryAST, {}, typeWeights)).toBe(6);
        });

        test('and a scalar value is provided with the query', () => {
            const query = `query { reviews(episode: NEWHOPE, first: 3) { stars, episode } }`;
            const queryAST: DocumentNode = parse(query);
            expect(getQueryTypeComplexity(queryAST, {}, typeWeights)).toBe(4);
        });

        test('and the argument is passed in as a variable', () => {
            const query = `query variableQuery ($items: Int){ reviews(episode: NEWHOPE, first: $items) { stars, episode } }`;
            const queryAST: DocumentNode = parse(query);
            expect(getQueryTypeComplexity(queryAST, { items: 7, first: 4 }, typeWeights)).toBe(8);
            expect(getQueryTypeComplexity(queryAST, { first: 4, items: 7 }, typeWeights)).toBe(8);
        });
    });

    describe('a default value is not provided in the schema', () => {
        xtest('and a value is not provied with the query', () => {
            const query = `query { heroes(episode: NEWHOPE) { stars, episode } }`;
            const queryAST: DocumentNode = parse(query);
            // FIXME: Update expected result if unbounded lists are suppored
            expect(getQueryTypeComplexity(queryAST, {}, typeWeights)).toBe(5);
        });

        test('and a scalar value is provided with the query', () => {
            const query = `query { heroes(episode: NEWHOPE, first: 3) { stars, episode } }`;
            const queryAST: DocumentNode = parse(query);
            expect(getQueryTypeComplexity(queryAST, {}, typeWeights)).toBe(4);
        });

        test('and the argument is passed in as a variable', () => {
            const query = `query variableQuery ($items: Int){ heroes(episode: NEWHOPE, first: $items) { stars, episode } }`;
            const queryAST: DocumentNode = parse(query);
            expect(getQueryTypeComplexity(queryAST, { items: 7 }, typeWeights)).toBe(8);
        });
    });

    test('a custom object weight was configured', () => {
        const customTypeWeights: TypeWeightObject = buildTypeWeightsFromSchema(schema, {
            object: 3,
        });
        const query = `query { heroes(episode: NEWHOPE, first: 3) { stars, episode } }`;
        const queryAST: DocumentNode = parse(query);
        expect(getQueryTypeComplexity(queryAST, {}, customTypeWeights)).toBe(10);
    });

    test('a custom object weight was set to 0', () => {
        const customTypeWeights: TypeWeightObject = buildTypeWeightsFromSchema(schema, {
            object: 0,
        });
        const query = `query { heroes(episode: NEWHOPE, first: 3) { stars, episode } }`;
        const queryAST: DocumentNode = parse(query);
        expect(getQueryTypeComplexity(queryAST, {}, customTypeWeights)).toBe(1); // 1 query
    });
    test('a custom scalar weight was set to greater than 0', () => {
        const customTypeWeights: TypeWeightObject = buildTypeWeightsFromSchema(schema, {
            scalar: 2,
        });
        const query = `query { heroes(episode: NEWHOPE, first: 3) { stars, episode } }`;
        const queryAST: DocumentNode = parse(query);
        expect(getQueryTypeComplexity(queryAST, {}, customTypeWeights)).toBe(16);
    });

    test('variable names matching limiting keywords do not interfere with scalar argument values', () => {
        const query = `query variableQuery ($items: Int){ heroes(episode: NEWHOPE, first: 3) { stars, episode } }`;
        const queryAST: DocumentNode = parse(query);
        expect(getQueryTypeComplexity(queryAST, { first: 7 }, typeWeights)).toBe(4);
    });

    test('nested queries with lists', () => {
        const query = `query { reviews(episode: NEWHOPE, first: 2) {stars, objectList(first: 3) {hi}}} `;
        expect(getQueryTypeComplexity(parse(query), {}, typeWeights)).toBe(9); // 1 Query + 2 review + (2 *  3 objects)
    });

    test('queries with inner scalar lists', () => {
        const query = `query { reviews(episode: NEWHOPE, first: 2) {stars, scalarList(last: 3) }}`;
        expect(getQueryTypeComplexity(parse(query), {}, typeWeights)).toBe(3); // 1 Query + 2 reviews
    });

    test('queries with inner scalar lists and custom scalar weight greater than 0', () => {
        const customTypeWeights: TypeWeightObject = buildTypeWeightsFromSchema(schema, {
            scalar: 2,
        });
        const query = `query { reviews(episode: NEWHOPE, first: 2) {stars, scalarList(last: 3) }}`;
        expect(getQueryTypeComplexity(parse(query), {}, customTypeWeights)).toBe(19); // 1 Query + 2 reviews + 2 * (2 stars + (3 * 2 scalarList)
    });

    xtest('an invalid arg type is provided', () => {
        const query = `query { heroes(episode: NEWHOPE, first = 3) { stars, episode } }`;
        const queryAST: DocumentNode = parse(query);
        // FIXME: What is the expected behavior? Treat as unbounded?
        fail('test not implemented');
    });
});
